@inproceedings{10.1145/3426422.3426977,
author = {Izawa, Yusuke and Masuhara, Hidehiko},
title = {Amalgamating Different JIT Compilations in a Meta-Tracing JIT Compiler Framework},
year = {2020},
isbn = {9781450381758},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3426422.3426977},
doi = {10.1145/3426422.3426977},
abstract = {Most virtual machines employ just-in-time (JIT) compilers to achieve high-performance. Trace-based compilation and method-based compilation are two major compilation strategies in JIT compilers. In general, the former excels in compiling programs with more in-depth method calls and more dynamic branches, while the latter is suitable for a wide range of programs. Some previous studies have suggested that each strategy has its advantages and disadvantages, and there is no clear winner.  In this paper, we present a new approach, namely, the meta-hybrid JIT compilation strategy. It combines trace-based and method-based compilations to utilize the advantages of both strategies. Moreover, it is realized as a meta JIT compiler framework; thus, we can generate a VM with a hybrid JIT compiler that can apply different program parts by merely writing an interpreter with our framework.  We chose to extend a meta-tracing JIT compiler and supported the two compilations on it. As a prototype, we implemented a simple meta-tracing JIT compiler framework called BacCaml based on the MinCaml compiler by following RPython’s architecture.  We evaluated its performance by creating a small functional programming language with BacCaml and running microbenchmark programs. Furthermore, we performed a synthetic experiment to confirm that there are programs that run faster by hybrid compilation.},
booktitle = {Proceedings of the 16th ACM SIGPLAN International Symposium on Dynamic Languages},
pages = {1–15},
numpages = {15},
keywords = {JIT compiler, RPython, meta-tracing JIT compiler, language implementation framework},
location = {Virtual, USA},
series = {DLS 2020},
}
@inproceedings{10.1145/3328433.3328439,
author = {Izawa, Yusuke and Masuhara, Hidehiko and Aotani, Tomoyuki},
title = {Extending a Meta-Tracing Compiler to Mix Method and Tracing Compilation},
year = {2019},
isbn = {9781450362573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328433.3328439},
doi = {10.1145/3328433.3328439},
abstract = {Meta-interpreter-based just-in-time compiler frameworks provide a convenient way for language designers to implement efficient virtual machines. Those frameworks either employ tracing-based or method- (or partial evaluation) based strategies, which have their own pros and cons. This paper proposes an approach to enable both tracing- and method-based compilation so that the runtime can selectively apply an appropriate strategy to different parts of a program. The proposal basically extends a meta-tracing compiler to method-based compilation by roll backing at conditional branches, trace-splitting at loop entries, and not following at function calls. As a proof-of-concept, we implemented a tiny meta-tracing compiler in MinCaml by following the RPython's architecture and extended it to support both tracing- and method-based compilation.},
booktitle = {Proceedings of the Conference Companion of the 3rd International Conference on Art, Science, and Engineering of Programming},
articleno = {5},
numpages = {3},
keywords = {language implementation frameworks, tracing JIT compilation, RPython},
location = {Genova, Italy},
series = {Programming '19},
}
@inproceedings{10.1145/3328433.3328466,
author = {Izawa, Yusuke},
title = {BacCaml: The Meta-Hybrid Just-in-Time Compiler},
year = {2019},
isbn = {9781450362573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328433.3328466},
doi = {10.1145/3328433.3328466},
abstract = {Meta-interpreter-based just-in-time compiler frameworks [2, 3, 12, 13] are useful to conveniently build a language runtime with reasonable execution performance1.},
booktitle = {Proceedings of the Conference Companion of the 3rd International Conference on Art, Science, and Engineering of Programming},
articleno = {32},
numpages = {3},
location = {Genova, Italy},
series = {Programming '19},
}
@unpublished{izawa2019jssst,
organization = {{J}apan Society for Software Science and Technology ({JSSST})},
location = {Shibaura Institute of Technology, Tokyo, Japan},
editor = {Kei Ito},
year = {2019},
booktitle = {Proceedings of the 36th JSSST Annual Conference},
author = {Yusuke Izawa AND Hidehiko Masuhara AND Tomoyuki Aotani AND Youyou Cong},
title = {A Stack Hybridization for Meta-hybrid Just-in-time Compilation},
pages = {No.~2-L},
review = {false},
keywords = {PyPy, BacCaml, MinCaml, RPython},
pdf = {jssst2019jit.pdf},
note = {nonrefereed},
abstract = {Meta-interpreter-based language implementation frameworks, such as RPython and Truffe/Graal, are convenient tool for implementing state-of-the-art virtual machines. Those frameworks are classified into trace-based and method- (or ast-) based strategies. RPython uses a trace-based policy to compile straight execution paths, while Truffe/Graal leverages method invocation to compile entire method bodies. Each approach has its own advantages and disadvantages. The trace-based strategy is good at compiling pro- grams with many branching possibilities and able to reduce the size of compiled code, but it is weak at programs with varying control-flow. The method-based strategy is robust with the latter type of programs but it needs thorough method-inlining management to achieve excellent performance. To take advantage of both strategies, we propose a meta-hybrid compilation technique to integrate trace- and method-based compilations, as well as a proof-of-concept implementation called BacCaml. To achieve this goal, we develop a stack hybridization mechanism which makes it possible to coordinate trace- and method-based meta JIT compilation. In the implementation, we extend RPython's architecture and introduced a special syntax for realizing this system in a single interpreter definition.}
}
@report{izawa2021ppl-reproduction,
author = {Yusuke Izawa AND Hidehiko Masuhara},
title = {Amalgamating Different {JIT} Compilations in a Meta-tracing {JIT} Compiler Framework},
note = {Reproduction of the DLS'20 talk at JSSST Programming and Programming Languages Workshop},
howpublished = {The 23nd JSSST Workshop on Programming and Programming Languages},
booktitle = {The 23nd JSSST Workshop on Programming and Programming Languages},
year = 2021,
date = {2021-03-09},
url = {https://jssst-ppl.org/workshop/2021/}
}
@misc{izawa2021ppl,
author = {Yusuke Izawa AND Hidehiko Masuhara AND Youyou Cong},
title = {An Interpreter Design for Supporting Different {JIT} Compilations in RPython Framework},
howpublished = {The 23nd JSSST Workshop on Programming and Programming Languages},
url = {https://easychair.org/smart-program/PPL2021/},
note = {Poster Presentation},
year = {2021}
}
@misc{takahashi2021ppl,
author = {Shusuke Takahashi AND Yusuke Izawa AND Hidehiko Masuhara AND Youyou Cong},
title = {汎言語的ライブプログラミング環境のためのデータ構造解析手法},
howpublished = {The 23nd JSSST Workshop on Programming and Programming Languages},
url = {https://easychair.org/smart-program/PPL2021/},
note = {Poster Presentation},
year = {2021}
}
@misc{masuhara2020live,
author = {Hidehiko Masuhara AND Shusuke Takahashi AND Yusuke Izawa AND Youyou Cong},
title = {Toward a Multi-Language and Multi-Environment Framework for Live Programming},
howpublished = {Talk at the 2020 Workshop on Live Programming (colocated with SPLASH 2020)},
year = 2020,
url = {https://2020.splashcon.org/home/live-2020},
note = {\textbf{Peer-reviewed}},
pdf = {live2020.pdf},
abstract = {While applications of live programming are expanding to more practical and professional domains, most live programming environments (LPEs) are still developed for a single target language with an original code editor.  We propose an implementation framework for developing LPEs so that we can minimize efforts on implementing an LPE for a different target language and an existing code editor/IDE.  Our idea is to use a meta-JIT language implementation framework (e.g., Graal/Truffle and RPython) and LSP to separate core live programming implementations from language-specific and editor/IDE specific implementations.  This paper takes the Kanon live programming environment as a concrete example and discusses how we can design the framework to accommodate the features of Kanon.  Although the framework design is still underway, the paper presents a sketch of the framework APIs for separating language-specific functions and clarifies the requirements to LSP.},
}
@misc{takahashi2020jssstppl,
author = {Shusuke Takahashi AND Yusuke Izawa AND Hidehiko Masuhara AND Youyou Cong},
title = {ライブプログラミング環境は多言語化/多開発環境化の夢を見るか},
howpublished = {The 37th JSSST Anual Conference. Japan Society for Software Science and Technology},
year = 2020,
note = {Poster Presentation},
url = {https://jssst2020.wordpress.com/program/}
}
@misc{izawa2020ppl,
author = {Yusuke Izawa AND Hidehiko Masuhara},
title = {Making different JIT Compilations Dancing to the Same Tune, Acting in the Meta-level},
howpublished = {The 22nd JSSST Workshop on Programming and Programming Languages},
year = 2020,
note = {Poster Presentation},
url = {https://easychair.org/smart-program/PPL2020/},
}
@misc{izawa2018ppl,
author = {Yusuke Izawa AND Hidehiko Masuhara AND Tomoyuki Aotani},
title = {メタ混合 {JIT} コンパイラの提案},
howpublished = {The 20nd JSSST Workshop on Programming and Programming Languages},
year = 2018,
note = {Poster Presentation},
url = {https://jssst-ppl.org/workshop/2018/program.html}
}